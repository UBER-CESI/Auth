# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    env:
      ADDRESSES_CUSTOMERS: http://customers:8080
      ADDRESSES_RESTAURANTS: http://restaurants:8080
      ADDRESSES_DELIVERERS:  http://deliverers:8080
      ADDRESSES_ORDERS:  http://orders:8080
      ADDRESSES_MENUS: http://restaurants:8080/restaurant/menu
      ADDRESSES_ITEMS: http://restaurants:8080/restaurant/item
      DB_SERV: ${{ secrets.SQL_DB_SERV }}
      DB_NAME: ${{ secrets.SQL_DB_NAME }}
      DB_PWD: ${{ secrets.SQL_DB_PASS }}
      DB_USER: ${{ secrets.SQL_DB_USER }}
      SQLPORT: ${{ secrets.SQLPORT }}
      # Use docker.io for Docker Hub if empty
      REGISTRY: ghcr.io
      # github.repository as <account>/<repo>
      IMAGE_NAME: ${{ github.repository }}
    services:
    
      customers:
        image: ghcr.io/uber-cesi/api:customers
        env: 
          DB_HOST: ${{ secrets.MONGO_DB_HOST }}
          DB_USER: ${{ secrets.MONGO_DB_USER }}
          DB_PASS: ${{ secrets.MONGO_DB_PASS }}
          LISTEN_ADDRESS: ${{ secrets.LISTEN_ADDRESS }}
          LISTEN_PORT: ${{ secrets.LISTEN_PORT }}
          CPU_NUMBER:  ${{ secrets.CPU_NUMBER }}
          
      deliverers:
        image: ghcr.io/uber-cesi/api:deliverers
        env: 
          DB_HOST: ${{ secrets.MONGO_DB_HOST }}
          DB_USER: ${{ secrets.MONGO_DB_USER }}
          DB_PASS: ${{ secrets.MONGO_DB_PASS }}
          LISTEN_ADDRESS: ${{ secrets.LISTEN_ADDRESS }}
          LISTEN_PORT: ${{ secrets.LISTEN_PORT }}
          CPU_NUMBER:  ${{ secrets.CPU_NUMBER }}
          
      orders:
        image: ghcr.io/uber-cesi/api:orders
        env: 
          DB_HOST: ${{ secrets.MONGO_DB_HOST }}
          DB_USER: ${{ secrets.MONGO_DB_USER }}
          DB_PASS: ${{ secrets.MONGO_DB_PASS }}
          LISTEN_ADDRESS: ${{ secrets.LISTEN_ADDRESS }}
          LISTEN_PORT: ${{ secrets.LISTEN_PORT }}
          CPU_NUMBER:  ${{ secrets.CPU_NUMBER }}
          
      restaurants:
        image: ghcr.io/uber-cesi/api:restaurants
        env: 
          DB_HOST: ${{ secrets.MONGO_DB_HOST }}
          DB_USER: ${{ secrets.MONGO_DB_USER }}
          DB_PASS: ${{ secrets.MONGO_DB_PASS }}
          LISTEN_ADDRESS: ${{ secrets.LISTEN_ADDRESS }}
          LISTEN_PORT: ${{ secrets.LISTEN_PORT }}
          CPU_NUMBER:  ${{ secrets.CPU_NUMBER }}
          
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - name: Test code
        run: npm test
      - name: Build javascript
        run: npm run build --if-present
      # - name: Build the Docker image
      #   run: docker build . --file Dockerfile --tag api-customers:$(date +%s)
      
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      # - name: Install cosign
      #   if: github.event_name != 'pull_request'
      #   uses: sigstore/cosign-installer@d6a3abf1bdea83574e28d40543793018b6035605
      #   with:
      #     cosign-release: 'v1.7.1'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image
      #   if: ${{ github.event_name != 'pull_request' }}
      #   env:
      #     COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
      #   run: cosign sign ${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }}
